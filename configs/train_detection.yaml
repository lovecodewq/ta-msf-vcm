# Faster R-CNN Detection Model Configuration
model:
  name: "faster_rcnn"
  backbone: "resnet50_fpn_v2"  # Backbone architecture
  pretrained: true  # Use pretrained backbone
  freeze_backbone: true  # Freeze backbone layers initially

# Data configuration
data:
  root_dir: "data/processed/kitti"  # Root directory containing train/val/test splits
  
  # Transform configuration for training
  transforms:
    resize:
      enabled: true  # Enable resizing for consistent input size
      size: [800, 1333]  # Standard Faster R-CNN size
    
    horizontal_flip:
      enabled: true
      probability: 0.5
    
    normalize:
      enabled: true
      mean: [0.485, 0.456, 0.406]  # ImageNet normalization
      std: [0.229, 0.224, 0.225]
    
    color_jitter:  # Add color augmentation
      enabled: true
      brightness: 0.2
      contrast: 0.2
      saturation: 0.2
  
  # Transform configuration for validation/testing
  val_transforms:
    resize:
      enabled: true
      size: [800, 1333]
    
    normalize:
      enabled: true
      mean: [0.485, 0.456, 0.406]
      std: [0.229, 0.224, 0.225]

# Training configuration
training:
  batch_size: 16  # Increased for RTX 5090's 32GB VRAM
  epochs: 20
  learning_rate: 0.002  # Adjusted for larger batch size
  num_workers: 12  # Increased for faster data loading with larger batches
  log_interval: 50
  save_dir: "detection_models"
  
  # Optimization settings
  optimizer:
    type: "SGD"
    momentum: 0.9
    weight_decay: 0.0001
    nesterov: true  # Enable Nesterov momentum for better convergence
  
  # Learning rate schedule
  lr_schedule:
    enabled: true
    type: "cosine"
    warmup_epochs: 2
    min_lr: 0.000001  # 1e-6 as float instead of string
    
  # Early stopping configuration
  early_stopping:
    enabled: true
    patience: 7  # Number of epochs to wait before early stopping
    min_delta: 0.0001  # Minimum change in loss to qualify as an improvement
    
  # Gradient accumulation for effective larger batch
  gradient_accumulation:
    enabled: true
    steps: 2  # Effective batch size = 16 * 2 = 32

# Validation settings
validation:
  interval: 1  # Validate every epoch
  save_predictions: true  # Save sample predictions
  num_samples: 8  # Increased visualization samples
  metrics:
    confidence_threshold: 0.5  # Confidence threshold for predictions
    save_pr_curve: true  # Save precision-recall curve

# Mixed precision training
mixed_precision:
  enabled: true
  dtype: "float16"
  scale_factor: 128  # Initial loss scale for mixed precision

# Memory optimization
memory:
  pin_memory: true
  persistent_workers: true
  prefetch_factor: 4  # Increased prefetch for larger batches
  
# Hardware settings
hardware:
  cudnn_benchmark: true
  deterministic: false
  gpu_id: 0  # Specify primary GPU 